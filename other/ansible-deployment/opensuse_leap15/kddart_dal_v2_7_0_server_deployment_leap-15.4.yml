#
# DAL Deployment script for openSuSe Leap 15.4
# Copyright (c) 2023, Diversity Arrays Technology, All rights reserved.
#
# Author: Puthick Hok, George Huang, Yu Qiu
# Date: 22/06/2023
# Usage: Usage: ansible-playbook kddart_dal_v2_7_0_server_deployment_leap-15.4.yml
# Description: By running the usage command, ansible will install and configure DAL
#              according the instructions in kddart_server_deployment_centos7.yml.
#              This script needs to be run by root.
#              For more information about how to read and write an ansible playbook,
#              please refer to ansible documentation on the web.
#

- name: Install KDDArT on host machine
  hosts: kddartserver
  gather_facts: no

  pre_tasks:
    - name: Install python and other related prerequisite parts if missing
      raw: zypper --non-interactive --no-gpg-checks install python3 python3-xml python3-pip
    - setup: # does gather_facts

  vars_prompt:
    - name: "local_tar_gz_file"
      prompt: "Enter the source tar.gz file of KDDart wih either relative or full path."
      private: no

    - name: "dbpass"
      prompt: "Password for kddart_dal user"
      private: yes

    - name: "ip_network"
      prompt: "Enter IP network of the target machine, eg. 192.168.78.0/24"
      private: no

    - name: "dal_address_name"
      prompt: "Enter address of the target machine"
      private: no

  vars:
    dal_version: v2.7.0
    src_file:  /root/KDDArT-DAL-{{ dal_version }}.tar.gz
    dal_db_version: v2_7_0
    local_dir: /root/KDDArT-DAL-{{ dal_version }}
    apache_base_dir: /srv/www
    local_src_dir: /usr/local
    force_tasks: True
    monetdbpass: monetdb
    postgrespass: '{{ dbpass }}'
    dal_address_name: kddart.example.com
    solr_workspace: /root/tmp_install_solr
    solr_config_file: /etc/default/solr.in.sh
    solr_install_dir: /opt
    solr_home: /var/solr
    solr_version: "8.11.1"
    mysql_jdbc_jar: mysql-connector-java-*-bin.jar
    monetdb_jdbc_jar: monetdb-jdbc-*.jar
    config_cron_job: False

    monetdb_systemd_config: |

             [Unit]
             Description=MonetDB daemon
             After=mysql.service

             [Service]
             User=root
             Type=forking
             ExecStart=/usr/local/bin/monetdbd start /var/lib/monetdb/dbfarm
             ExecStop=/usr/local/bin/monetdbd stop /var/lib/monetdb/dbfarm

             [Install]
             WantedBy=multi-user.target

  tasks:

    - name: Display Information
      debug:
        msg: "Running on inventory host: {{inventory_hostname}} - OS Info: {{ ansible_distribution }}{{ ansible_distribution_version }}"

    - name: Obtain OS version
      shell: grep 'VERSION=' /etc/os-release | sed 's|VERSION=||' | sed 's|"||g'
      register: os_version

    - name: Add zypper repo from Geo
      shell: >
        if [ ! `zypper lr | grep 'Geo'` ]; then
        zypper ar --no-gpgcheck https://mirrorcache-au.opensuse.org/repositories/Application:/Geo/15.5 Geo;
        fi;

    - name: Add zypper repo for Perl-dev
      shell: >
        if [ ! `zypper lr | grep 'Perl-Dev'` ]; then
        zypper ar --no-gpgcheck https://download.opensuse.org/repositories/devel:/languages:/perl/15.5 Perl-Dev;
        fi;

    - name: Remove package - libressl-devel
      zypper: pkg=libressl-devel state=absent

    - name: Install supporting binaries - libopenssl-devel
      zypper: pkg=libopenssl-devel state=present

    - name: Install supporting binaries
      zypper: pkg={{item}} state=present disable_gpg_check=yes
      with_items:
        - git
        - make
        - bison
        - gcc
        - perl
        - curl
        - apache2
        - apache2-mod_perl
        - perl-App-cpanminus
        - mariadb
        - libmariadb-devel
        - perl-DBD-Pg
        - perl-DBD-mysql
        - perl-Archive-Zip
        - perl-Net-SSLeay
        - perl-IO-Socket-SSL
        - perl-XML-DOM
        - perl-XML-Parser
        - perl-XML-LibXML
        - perl-Math-Pari
        - perl-Crypt-Random
        - libpq5
        - postgresql15
        - postgresql15-server
        - postgresql15-contrib
        - postgresql15-postgis
        - shapelib
        - libshp-devel
        - pcre
        - pcre-devel
        - libxml2
        - libxml2-devel
        - java-1_8_0-openjdk
        - pcre-devel
        - libxml2-devel
        - acl
        - lsof
        - cron
        - vim
        - bzip2
        - perl-LWP-Protocol-https
        - sysvinit-tools
        - insserv

    - name: Remove nagios-www (its apache config is not Apache 2.4 ready)
      zypper: pkg=nagios-www state=absent

    - name: Copy the tar.gz file
      copy: src={{ local_tar_gz_file }} dest={{ src_file }}

    - name: Create local_dir
      shell: >
        if [ ! -d {{ local_dir }} ]; then
        mkdir -p {{ local_dir }};
        fi

    - name: Untar and decompress KDDart source
      shell: >
        if [ -d {{ local_dir }} ]; then
        cd {{ local_dir }};
        tar -zxvf {{ src_file }} --strip 1;
        fi;

    - name: Install cpanm
      shell: curl -L https://cpanmin.us | perl - App::cpanminus
      register: bash_result
      changed_when: "bash_result.rc != 0"

    - name: Make cpan run without asking
      shell: >
        export PERL_MM_USE_DEFAULT=1;
        export PERL_EXTUTILS_AUTOINSTALL="--defaultdeps";
        perl -MCPAN -e "install 'Parse::PMFile'";

    - name: Added nobody user which is required to run perl test for Apache2_4::AuthCookie
      user:
        name: nobody
        shell: /bin/bash

    - name: Install Perl Libraries used in DAL
      cpanm: name={{item}}
      with_items:
        - DBI
        - DBD::SQLite
        - Geo::Coder::Google
        - Text::CSV
        - Text::CSV_XS
        - Text::CSV::Simple
        - DateTime::Format::MySQL
        - DateTime::Format::Flexible
        - DateTime::Format::Pg
        - Email::Valid
        - Config::Simple
        - Apache2_4::AuthCookie
        - Color::Calc
        - Apache::Htpasswd
        - Authen::Simple
        - CGI::Application
        - CGI::Application::Dispatch
        - CGI::Application::Plugin::AutoRunmode
        - CGI::Application::Plugin::ActionDispatch
        - CGI::Application::Plugin::DevPopup
        - CGI::Application::Plugin::Session
        - Log::Log4perl
        - Net::OAuth2::Client
        - Net::OAuth2::AccessToken
        - Mozilla::CA
        - Tree::R
        - JSON::XS
        - Hash::Merge
        - XML::Simple
        - XML::Writer
        - XML::Parser::PerlSAX
        - File::Lockfile
        - JSON::Validator
        - String::Random
        - String::Escape
        - XML::XSLT
        - UNIVERSAL::require
        #- Apache::Solr Current Code base requires version Apache-Solr-1.01
        - MCE
        - MCE::Shared
        - Moo
        - Throwable::Error
        - Geo::WKT::Simple
        - HTTP::CookieJar::LWP
        - File::Copy::Recursive
        - Crypt::JWT
        - File::Lockfile
        - Data::Dumper
        - Digest::MD5

    - name: Install Geo::Shapelib manually
      shell: >
        cd /tmp;
        curl -L https://cpan.metacpan.org/authors/id/A/AJ/AJOLMA/Geo-Shapelib-0.22.tar.gz | tar zx;
        cd /tmp/Geo-Shapelib-0.22;
        perl -w Makefile.PL --shapelib=/usr/lib64/libshp.so;
        make install;
        rm -rf /tmp/Geo-Shapelib-0.22;

    - name: Install CGI::Application::Plugin::Authentication manually
      shell: >
        cd /tmp;
        curl -L https://cpan.metacpan.org/authors/id/W/WE/WESM/CGI-Application-Plugin-Authentication-0.23.tar.gz | tar zx;
        cd /tmp/CGI-Application-Plugin-Authentication-0.23;
        perl -w Makefile.PL;
        make install;
        rm -rf /tmp/CGI-Application-Plugin-Authentication-0.23

    - name: Install XML::Checker manually
      shell: >
        cd /tmp;
        curl -L https://cpan.metacpan.org/authors/id/T/TJ/TJMATHER/XML-Checker-0.13.tar.gz | tar zx;
        cd /tmp/XML-Checker-0.13;
        perl -w Makefile.PL;
        make;
        make install;
        rm -rf /tmp/XML-Checker-0.13

    - name: Install Apache-Solr-1.01 manually
      shell: >
        cd /tmp;
        wget https://cpan.metacpan.org/authors/id/M/MA/MARKOV/Apache-Solr-1.01.tar.gz;
        cpanm install -f Apache-Solr-1.01.tar.gz;

    - name: Install monetdb manually
      shell: >
        if [ ! -e /usr/local/bin/monetdbd ]; then
        cd {{local_src_dir}};
        curl --insecure -L https://www.monetdb.org/downloads/sources/archive/MonetDB-11.35.9.tar.bz2 | tar jx;
        cd {{local_src_dir}}/MonetDB-11.35.9;
        {{local_src_dir}}/MonetDB-11.35.9/configure;
        make;
        make install;
        ldconfig;
        cd {{local_src_dir}};
        curl --insecure -L https://github.com/MonetDB/monetdb-perl/archive/v1.1-1.tar.gz | tar zx;
        cd {{local_src_dir}}/monetdb-perl-1.1-1;
        make;
        make install;
        rm -rf {{local_src_dir}}/MonetDB-11.35.9;
        rm -rf {{local_src_dir}}/monetdb-perl-1.1-1;
        fi;

    - name: Start monetdb service
      shell: >
        ldconfig;
        mkdir -p /var/lib/monetdb;
        [[ -d /var/lib/monetdb/dbfarm ]] || /usr/local/bin/monetdbd create /var/lib/monetdb/dbfarm;
        [[ `pidof /usr/local/bin/monetdbd` -gt 1 ]] || /usr/local/bin/monetdbd start /var/lib/monetdb/dbfarm;

    - service: name=postgresql state=started

    - name: Configure PostgreSQL access permission settings
      shell: >
        mv /var/lib/pgsql/data/pg_hba.conf /var/lib/pgsql/data/pg_hba_conf`date +'%Y%m%d'`;
        echo 'local   all             all                                   trust' > /var/lib/pgsql/data/pg_hba.conf;
        echo 'host    all             all             127.0.0.1/32          trust' >> /var/lib/pgsql/data/pg_hba.conf;
        echo 'host    all             all             ::1/128               trust' >> /var/lib/pgsql/data/pg_hba.conf;
        echo 'host    kddart_gis_enviro_{{ dal_db_version }}  all           {{ ip_network }}        password' >> /var/lib/pgsql/data/pg_hba.conf;
        echo 'host    kddart_gis_enviro_{{ dal_db_version }}  all           127.0.0.1/24            password' >> /var/lib/pgsql/data/pg_hba.conf;

    - service: name=mysql state=started

    - service: name=postgresql state=restarted

    - service: name=mysql state=restarted

    - name: Adjust create_dbs.sh update the password
      shell: >
        sed -i "s|DB_PASS='yourSecurePassword'|DB_PASS='{{ dbpass }}'|g" {{ local_dir }}/other/create_dbs.sh;

    - name: Create KDDart Databases
      shell: "/bin/bash {{ local_dir }}/other/create_dbs.sh 1 kddart_gis_enviro_{{ dal_db_version }} {{ local_dir }}/other/db_files/kddart_gis_enviro_dal_{{ dal_version }}_postgis2.sql kddart_{{ dal_db_version }} {{ local_dir }}/other/db_files/kddart_dal_{{ dal_version }}.sql kddart_marker_{{ dal_db_version }} {{ local_dir }}/other/db_files/kddart_marker_dal_{{ dal_version }}.sql 1"

    - name: Save create dbs command for demo databases
      shell: echo "{{ local_dir }}/other/create_dbs.sh 2 kddart_gis_enviro_{{ dal_db_version }} {{ local_dir }}/other/db_files/demo/kddart_gis_enviro_demo_{{ dal_db_version }}.sql kddart_{{ dal_db_version }} {{ local_dir }}/other/db_files/demo/kddart_demo_{{ dal_db_version }}.sql kddart_marker_{{ dal_db_version }} {{ local_dir }}/other/db_files/demo/kddart_marker_demo_{{ dal_db_version }}.sql 1" > {{ local_dir }}/other/run_create_demo_dbs.sh; chmod 755 {{ local_dir }}/other/run_create_demo_dbs.sh;

    - name: Save create dbs command for blank databases
      shell: echo "{{ local_dir }}/other/create_dbs.sh 2 kddart_gis_enviro_{{ dal_db_version }} {{ local_dir }}/other/db_files/kddart_gis_enviro_dal_{{ dal_version }}_postgis2.sql kddart_{{ dal_db_version }} {{ local_dir }}/other/db_files/kddart_dal_{{ dal_version }}.sql kddart_marker_{{ dal_db_version }} {{ local_dir }}/other/db_files/kddart_marker_dal_{{ dal_version }}.sql 1"  > {{ local_dir }}/other/run_create_empty_dbs.sh; chmod 755 {{ local_dir }}/other/run_create_empty_dbs.sh;

    - name: Make host entry
      shell: |
        found=0
        publicIP=`hostname -I | awk '{print $1}'`
        lines=`cat /etc/hosts`
        while read -r line ; do
            if [[ $line && ! $line =~ ^# ]]; then
                if [[ $line =~ $publicIP[[:space:]]+{{ dal_address_name }} ]]; then
                    found=1
                    break
                fi
            fi
        done <<< "$lines"
        if [[ $found -eq 0 ]]; then
            echo "" >> /etc/hosts
            echo -n "$publicIP {{ dal_address_name }} $(hostname)" >> /etc/hosts
        fi

    - name: Copy apache configuration
      shell: "[[ -f /etc/apache2/vhosts.d/http-{{ dal_address_name }}.conf ]] || cp {{local_dir}}/other/http-kddart.example.com.conf /etc/apache2/vhosts.d/http-{{ dal_address_name }}.conf"

    - name: Configure apache vhost file
      shell: sed -i "s/kddart.example.com/{{ dal_address_name }}/g" /etc/apache2/vhosts.d/http-{{ dal_address_name }}.conf

    - name: Create directories
      file: path={{ item }} state=directory owner=wwwrun group=www mode=0755
      with_items:
        - '{{ apache_base_dir }}/cgi-bin/kddart'
        - '{{ apache_base_dir }}/tmp/kddart'
        - '{{ apache_base_dir }}/perl-lib'
        - '{{ apache_base_dir }}/vhosts'
        - '{{ apache_base_dir }}/vhosts/{{ dal_address_name }}'
        - '{{ apache_base_dir }}/session/kddart'
        - '{{ apache_base_dir }}/secure'
        - '{{ apache_base_dir }}/vhosts/{{ dal_address_name }}/storage'
        - '{{ apache_base_dir }}/vhosts/{{ dal_address_name }}/storage/multimedia'

    - name: Create monetdb password file
      shell: "[[ -f {{ apache_base_dir }}/secure/monetdb_user.txt ]] || echo \"username = monetdb\npassword = {{ monetdbpass }}\" > {{ apache_base_dir }}/secure/monetdb_user.txt"

    - name: Create mysql password file
      shell: "[[ -f {{ apache_base_dir }}/secure/mysql_user.txt ]] || echo \"username = kddart_dal\npassword = {{ dbpass }}\" > {{ apache_base_dir }}/secure/mysql_user.txt"

    - name: Create postgres password file
      shell: "[[ -f {{ apache_base_dir }}/secure/postgres_user.txt ]] || echo \"username = kddart_dal\npassword = {{ dbpass }}\" > {{ apache_base_dir }}/secure/postgres_user.txt"

    - name: Copy files to the relevant direcotries - due to * it needs in one line
      shell: >
        cp -rp {{ local_dir }}/vhosts/kddart.example.com/* {{ apache_base_dir }}/vhosts/{{ dal_address_name }};
        cp -rp {{ local_dir}}/perl-lib/* {{ apache_base_dir }}/perl-lib;
        cp {{local_dir}}/other/kddart_dal.cfg {{ apache_base_dir }}/secure;
        cp {{local_dir}}/cgi-bin/kddart/* {{ apache_base_dir }}/cgi-bin/kddart;

    - name: Change /tmp/kddart to {{ apache_base_dir }}/tmp/kddart (Apache2.4 cannot write to /tmp)
      shell: sed -i "s|/tmp/kddart/|{{ apache_base_dir }}/tmp/kddart/|" {{ apache_base_dir }}/secure/kddart_dal.cfg;

    - name: Change owner to wwwrun
      shell: chown wwwrun:www {{ apache_base_dir }}/vhosts/{{ dal_address_name }} -Rf

    - name: Change owner to wwwrun for dal config file
      shell: chown wwwrun:www {{ apache_base_dir }}/secure/kddart_dal.cfg

    - name: Update base URL for test cases
      shell: echo "http://{{ dal_address_name }}/dal" > {{ local_dir }}/other/whitebox_test_cases/TestSuite/dal_base_url.conf

    - name: Add perl module load to sysconfig
      shell: "[[ `grep 'APACHE_MODULES=.*perl' /etc/sysconfig/apache2` ]] || a2enmod perl"

    - name: Add headers module load to sysconfig
      shell: "[[ `grep 'APACHE_MODULES=.*headers' /etc/sysconfig/apache2` ]] || a2enmod headers"

    - name: Change ACL for tmp directory
      shell: >
        setfacl -d -m o::rx {{ apache_base_dir }}/tmp/kddart;
        setfacl -d -m g::rwx {{ apache_base_dir }}/tmp/kddart;

    - name: Update kddart_dal.cfg file
      shell: |
        sed -i "s/kddart.example.com/{{ dal_address_name }}/g" {{ apache_base_dir }}/secure/kddart_dal.cfg

    - name: Restart mysql
      shell: systemctl restart mysql

    - name: Restart postgresql
      shell: systemctl restart postgresql

    - name: Restart monetdb
      shell: >
        [[ `pidof /usr/local/bin/monetdbd` -gt 1 ]] && /usr/local/bin/monetdbd stop /var/lib/monetdb/dbfarm;
        sleep 30s;
        /usr/local/bin/monetdbd start /var/lib/monetdb/dbfarm;

    - name: Restart apache
      shell: systemctl restart apache2

    - name: Make mysql start on reboot
      shell: systemctl disable mysql && systemctl enable mysql

    - name: Make postgresql start on reboot
      shell: systemctl enable postgresql

    - name: Make apache2 start on reboot
      shell: systemctl enable apache2

    - name: Create JAVA Home environment variable
      shell: "[[ `grep 'export JAVA_HOME' /etc/bash.bashrc` ]] || echo 'export JAVA_HOME=/usr/lib64/jvm/java-1.8.0-openjdk-1.8.0/jre' >> /etc/bash.bashrc"

    - name: Run export for JAVA Home for this session
      shell: export JAVA_HOME=/usr/lib64/jvm/java-1.8.0-openjdk-1.8.0/jre

    - name: Create Java Classpath environment variable
      shell: "[[ `grep 'export CLASSPATH' /etc/bash.bashrc` ]] || echo 'export CLASSPATH=$JAVA_HOME/lib' >> /etc/bash.bashrc"

    - name: Run export for Java Classpath for this session
      shell: export CLASSPATH=$JAVA_HOME/lib

    - name: Create Solr working directory
      file: path={{ solr_workspace }} state=directory

    - name: Download Solr
      get_url:
        url: "http://archive.apache.org/dist/lucene/solr/{{ solr_version }}/solr-{{ solr_version }}.tgz"
        dest: "{{ solr_workspace }}/solr-{{ solr_version }}.tgz"
        force: no

    - name: Expand Solr
      unarchive:
        src: "{{ solr_workspace }}/solr-{{ solr_version }}.tgz"
        dest: "{{ solr_workspace }}"
        creates: "{{ solr_workspace }}/solr-{{ solr_version }}/CHANGES.txt"
        copy: no

    - name: Run Solr installation script
      shell: >
        {{ solr_workspace }}/solr-{{ solr_version }}/bin/install_solr_service.sh
        {{ solr_workspace }}/solr-{{ solr_version }}.tgz
        -i {{ solr_install_dir }}
        -d {{ solr_home }} -f -n
        creates={{ solr_install_dir }}/solr/bin/solr

    - name: Start solr
      shell: >
        [[ `grep 'solr' /etc/passwd` ]] || useradd -m solr;
        chown solr:root -R /var/solr;
        [[ -e /var/solr/solr-8983.pid ]] || /etc/init.d/solr start;

    - name: Check current list of Solr cores
      uri:
        url: http://localhost:8983/solr/admin/cores
        return_content: yes
      register: solr_cores_current

    - name: List Solr cores
      debug:
        var: solr_cores_current.content

    - name: Create configured cores.
      shell: "su solr -c '{{ solr_install_dir }}/solr/bin/solr create_core -c {{ item }}'"
      when: item not in solr_cores_current.content
      with_items:
        - db
        - monetdb
        - dal

    - name: Insert config into db core solrconfig.xml
      blockinfile:
        dest: "{{ solr_home }}/data/db/conf/solrconfig.xml"
        marker: "<!-- {mark} DART ANSIBLE MANAGED BLOCK -->"
        insertafter: "<config>"
        content: |
            <lib dir="${solr.install.dir}/dist/" regex="solr-dataimporthandler-.*\.jar" />
            <lib dir="${solr.install.dir:../../../..}/contrib/dataimporthandler-extras/lib/" regex=".*\.jar" />
            <requestHandler name="/dataimport" class="org.apache.solr.handler.dataimport.DataImportHandler">
              <lst name="defaults">
               <str name="config">db-data-config.xml</str>
              </lst>
            </requestHandler>

    - name: Insert config into monetdb core solrconfig.xml
      blockinfile:
        dest: "{{ solr_home }}/data/monetdb/conf/solrconfig.xml"
        marker: "<!-- {mark} DART ANSIBLE MANAGED BLOCK -->"
        insertafter: "<config>"
        content: |
            <lib dir="${solr.install.dir}/dist/" regex="solr-dataimporthandler-.*\.jar" />
            <lib dir="${solr.install.dir:../../../..}/contrib/dataimporthandler-extras/lib/" regex=".*\.jar" />
            <requestHandler name="/dataimport" class="org.apache.solr.handler.dataimport.DataImportHandler">
              <lst name="defaults">
                <str name="config">monetdb-data-config.xml</str>
              </lst>
            </requestHandler>

    - name: copy data-config.xml for each core
      shell: cp {{ local_dir }}/other/solr/config/{{ item }}/conf/{{ item }}-data-config.xml {{ solr_home }}/data/{{ item }}/conf
      with_items:
        - db
        - monetdb
        - dal

    - name: Copy MySQL jdbc jar files
      shell: cp -f {{ local_dir }}/other/solr/dataimporthandler/*.jar {{ solr_install_dir }}/solr/contrib/dataimporthandler-extras/lib

    - name: Configure core db
      shell: >
        {{ local_dir }}/other/solr/{{ item }}-setup-fields.sh 1>{{ local_dir }}/{{ item }}-setup-fields.log 2>&1
      with_items:
        - db
        - monetdb
        - dal

    - name: Put the password into db-data-config.xml
      replace: dest={{ solr_home }}/data/{{ item }}/conf/{{ item }}-data-config.xml regexp='yourSecurePassword' replace="{{ dbpass }}"
      with_items:
        - db
        - monetdb

    - name: Change unique key from id to SolrId
      replace: dest={{ solr_home }}/data/{{ item }}/conf/managed-schema regexp='<uniqueKey>id</uniqueKey>' replace="<uniqueKey>SolrId</uniqueKey>"
      with_items:
        - db
        - monetdb
        - dal
    
    - name: Remove id field
      replace:
        path: "/var/solr/data/{{ item }}/conf/managed-schema"
        regexp: '<field name="id"*'
        replace: ""
      with_items:
        - db
        - monetdb
        - dal
    
    - name: Update type of field _root_ to that of SolrId (Solr requires them to be the same)
      replace:
        path: "/var/solr/data/{{ item }}/conf/managed-schema"
        regexp: '<field name="_root_" type="string"'
        replace: '<field name="_root_" type="text_general"'
      with_items:
        - db
        - monetdb

    - name: Restart solr
      shell: /etc/init.d/solr restart

    - name: Reindex Solr Cron job
      cron:
        minute: "*/15"
        job: "/usr/bin/perl -w {{ local_dir }}/other/solr/reindex_solr.pl --dalbaseurl 'http://{{ dal_address_name }}/dal' --workingdir '/tmp' --username 'admin' --password 'kddartadmin' --kddartgroup 0 --solrhost 'http://localhost' --solrport '8983' --solrcorecsv 'dal,db,monetdb' > /root/reindex_solr.log 2>&1"
      when: config_cron_job == True
