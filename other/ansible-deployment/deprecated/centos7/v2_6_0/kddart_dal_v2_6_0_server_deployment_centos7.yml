#
# DAL Deployment script for CentOS 7
# Copyright (c) 2023, Diversity Arrays Technology, All rights reserved.
#
# Author: Puthick Hok, George Xiyue Huang
# Date: 21/07/2022
# Description: Supporting ansible playbook script
#

# Install Postgres - after first adding required repo:
# If this step fails, please check with https://www.postgresql.org/download/linux/redhat/ for correct URL

- name: Add postgresql repo for Centos, Scientific, or RedHat
  yum: state=installed pkg={{item}}
  with_items:
      - http://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm

#- name: Add postgresql repo for Centos or RedHat
#  shell: "[[ `rpm -qa | grep 'pgdg'` ]] || rpm -ivh http://yum.postgresql.org/9.5/redhat/rhel-7-x86_64/pgdg-centos95-9.5-3.noarch.rpm"
#  when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

#- name: Add postgresql repo for SL7
#  shell: >
#    [[ `rpm -qa | grep 'pgdg-sl95-9.5-3'` ]] ||
#      rpm -ivh https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-7-x86_64/pgdg-sl95-9.5-3.noarch.rpm
#  when: ansible_distribution == 'Scientific'


- name: Install Postgres
  yum: state=installed pkg={{ item }}
  with_items:
    - postgresql10
    - postgresql10-server
    - postgresql10-libs

- name: Install ele-release package
  shell: "[[ `rpm -qa | grep 'epel-release'` ]] || yum -y install epel-release"

- name: Add mysql YUM repo package
  shell: "[[ `rpm -qa | grep 'mysql57-community-release-el7'` ]] || rpm -ivh http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm"

- name: Install PostGIS
  yum: state=installed pkg={{ item }}
  with_items:
    - postgis24_10
    - postgis24_10-client

- name: Install supporting binaries
  yum: state=present pkg={{ item }}
  with_items:
    - make
    - gcc
    - bison
    - openssl
    - openssl-devel
    - libxml2
    - libxml2-devel
    - perl
    - cpan
    - httpd
    - httpd-devel
    - mysql-server
    - perl-DBI
    - perl-DBD-mysql
    - perl-DBD-Pg
    - perl-DBD-SQLite
    - shapelib
    - shapelib-devel
    - perl-ExtUtils-Manifest
    - perl-ExtUtils-MakeMaker
    - perl-Data-Dumper
    - perl-Digest-SHA
    - perl-Digest-MD5
    - perl-Compress-Raw-Bzip2
    - perl-Compress-Raw-Zlib
    - perl-DateTime-Format-MySQL
    - perl-DateTime-Format-Pg
    - perl-CGI-Application
    - perl-Authen-Simple
    - perl-Apache-Htpasswd
    - perl-UNIVERSAL-require
    - perl-String-Random
    - perl-Config-Simple
    - perl-Text-CSV
    - perl-Text-CSV_XS
    - perl-JSON-XS
    - perl-XML-DOM
    - perl-Env
    - perl-CGI-Session
    - perl-XML-SAX
    - perl-Test-TCP
    - perl-String-Escape
    - libselinux-python
    - java-1.8.0-openjdk
    - lsof
    - yum-plugin-versionlock
    - curl
    - libcurl-devel
    - bzip2-devel
    - unzip
    - crontabs

- name: Install mod_perl 2.0.9
  shell: "[[ `rpm -qa | grep 'mod_perl-2.0.9'` ]] || rpm -ihv http://repo.openfusion.net/centos7-x86_64/mod_perl-2.0.9-1.of.el7.x86_64.rpm"

- name: Install mod_perl-devel
  shell: "[[ `rpm -qa | grep 'mod_perl-devel-2.0.9'` ]] || rpm -ihv http://repo.openfusion.net/centos7-x86_64/mod_perl-devel-2.0.9-1.of.el7.x86_64.rpm"

- name: Install cpanm
  shell: curl -L https://cpanmin.us | perl - App::cpanminus
  register: bash_result
  changed_when: "bash_result.rc != 0"

- name: Install Perl Libraries used in DAL
  cpanm: name={{ item }}
  with_items:
    - Geo::Coder::Google
    - Text::CSV::Simple
    - Email::Valid
    - Apache2_4::AuthCookie
    - Color::Calc
    - CGI::Session
    - CGI::Application::Dispatch
    - CGI::Application::Plugin::AutoRunmode
    - CGI::Application::Plugin::ActionDispatch
    - CGI::Application::Plugin::DevPopup
    - CGI::Application::Plugin::Session
    - CGI::Application::Plugin::Config::Simple
    - Log::Log4perl
    - Net::OAuth2::Client
    - Net::OAuth2::AccessToken
    - Net::SSLeay
    - IO::Socket::SSL
    - Mozilla::CA
    - Tree::R
    - Hash::Merge
    - XML::Parser::PerlSAX
    - File::Lockfile
    - Mojolicious
    - JSON::Validator
    - XML::XSLT
    - XML::Writer
    - XML::Simple
    - Apache::Solr
    - MCE
    - MCE::Shared
    - DateTime::Format::Flexible

- name: Install Crypt-Random dependent Class-Loader from rpm
  shell: "[[ `rpm -qa | grep 'perl-Class-Loader'` ]] || rpm -ihv http://repo.openfusion.net/centos7-x86_64/perl-Class-Loader-2.03-1.of.el7.noarch.rpm"

- name: Install Crypt-Random dependent Math-Pari from rpm
  shell: "[[ `rpm -qa | grep 'perl-Math-Pari'` ]] || rpm -ihv http://repo.openfusion.net/centos7-x86_64/perl-Math-Pari-2.010808-1.of.el7.x86_64.rpm"

- name: Install Crypt-Random from rpm
  shell: "[[ `rpm -qa | grep 'perl-Crypt-Random'` ]] || rpm -ihv http://repo.openfusion.net/centos7-x86_64/perl-Crypt-Random-1.25-1.of.el7.noarch.rpm"

- name: Install Geo::Shapelib manually
  shell: >
    cd /tmp;
    curl -L http://search.cpan.org/CPAN/authors/id/A/AJ/AJOLMA/Geo-Shapelib-0.22.tar.gz | tar zx;
    cd /tmp/Geo-Shapelib-0.22;
    perl -w Makefile.PL --shapelib=/usr/lib64/libshp.so.1;
    make install;
    rm -rf /tmp/Geo-Shapelib-0.22;

- name: Install CGI::Application::Plugin::Authentication manually
  shell: >
    cd /tmp;
    curl -L http://www.cpan.org/authors/id/S/SI/SILASMONK/CGI-Application-Plugin-Authentication-0.20.tar.gz | tar zx;
    cd /tmp/CGI-Application-Plugin-Authentication-0.20;
    perl -w Makefile.PL;
    make install;
    rm -rf /tmp/CGI-Application-Plugin-Authentication-0.20


- name: Install XML::Checker manually
  shell: >
    cd /tmp;
    curl -L http://search.cpan.org/CPAN/authors/id/T/TJ/TJMATHER/XML-Checker-0.13.tar.gz | tar zx;
    cd /tmp/XML-Checker-0.13;
    perl -w Makefile.PL;
    make;
    make install;
    rm -rf /tmp/XML-Checker-0.13

- name: Install MonetDB (yum does not work so has to use rpm directly)
  shell: >
    [[ `rpm -qa | grep 'MonetDB-stream-11.27.13-20180202.el7.centos'` ]] || rpm -ihv https://www.monetdb.org/downloads/epel/archive/7/x86_64/MonetDB-stream-11.27.13-20180202.el7.centos.x86_64.rpm;
    [[ `rpm -qa | grep 'MonetDB-11.27.13-20180202.el7.centos'` ]] || rpm -ihv https://www.monetdb.org/downloads/epel/archive/7/x86_64/MonetDB-11.27.13-20180202.el7.centos.x86_64.rpm;
    [[ `rpm -qa | grep 'MonetDB-client-11.27.13-20180202.el7.centos'` ]] || rpm -ihv https://www.monetdb.org/downloads/epel/archive/7/x86_64/MonetDB-client-11.27.13-20180202.el7.centos.x86_64.rpm;
    [[ `rpm -qa | grep 'MonetDB5-server-11.27.13-20180202.el7'` ]] || rpm -ihv https://www.monetdb.org/downloads/epel/archive/7/x86_64/MonetDB5-server-11.27.13-20180202.el7.centos.x86_64.rpm;
    [[ `rpm -qa | grep 'MonetDB-SQL-server5-11.27.13-20180202'` ]] || rpm -ihv https://www.monetdb.org/downloads/epel/archive/7/x86_64/MonetDB-SQL-server5-11.27.13-20180202.el7.centos.x86_64.rpm;
    [[ `rpm -qa | grep 'perl-DBD-monetdb-1.0-1.el7.centos'` ]] || rpm -ihv https://www.monetdb.org/downloads/epel/archive/7/x86_64/perl-DBD-monetdb-1.0-1.el7.centos.noarch.rpm;

- name: Lock MonetDB from being upgraded
  shell: >
    yum versionlock MonetDB-SQL-server5-11.27.13-20180202.el7.centos;
    yum versionlock MonetDB-client-11.27.13-20180202.el7.centos;

- name: Start monetdb service
  shell: >
    ldconfig;
    mkdir -p /var/lib/monetdb;
    [[ -d /var/lib/monetdb/dbfarm ]] || monetdbd create /var/lib/monetdb/dbfarm;
    [[ `pidof /usr/bin/monetdbd` -gt 1 ]] || /usr/bin/monetdbd start /var/lib/monetdb/dbfarm;

- name: Initialize Postgres
  shell: "[[ -e /var/lib/pgsql/10/data/pg_hba.conf ]] || /usr/pgsql-10/bin/postgresql-10-setup initdb"

- service: name=postgresql-10 state=started

- name: Configure PostgreSQL access permission settings
  shell: >
    mv /var/lib/pgsql/10/data/pg_hba.conf /var/lib/pgsql/10/data/pg_hba_conf`date +'%Y%m%d'`;
    echo 'local   all             all                                   trust' > /var/lib/pgsql/10/data/pg_hba.conf;
    echo 'host    all             all             127.0.0.1/32          trust' >> /var/lib/pgsql/10/data/pg_hba.conf;
    echo 'host    all             all             ::1/128               trust' >> /var/lib/pgsql/10/data/pg_hba.conf;
    echo 'host    kddart_gis_enviro_{{ dal_db_version }}  all           {{ ip_network }}        password' >> /var/lib/pgsql/10/data/pg_hba.conf;
    echo 'host    kddart_gis_enviro_{{ dal_db_version }}  all           127.0.0.1/24            password' >> /var/lib/pgsql/10/data/pg_hba.conf;

- service: name=postgresql-10 state=restarted

- name: Append Marker SQL group_concat definition
  shell: echo 'CREATE AGGREGATE group_concat(t text) RETURNS text external name "kddart"."group_concat";' >> {{ local_dir }}/other/db_files/kddart_marker_dal_{{ dal_version }}.sql

- name: Adjust create_dbs.sh update the password
  shell: >
    sed -i "s|MONET_PASS='monetdb'|MONET_PASS='{{ monetdbpass }}'|g" {{ local_dir }}/other/create_dbs.sh;
    sed -i "s|DB_PASS='yourSecurePassword'|DB_PASS='{{ dbpass }}'|g" {{ local_dir }}/other/create_dbs.sh;
    sed -i "s|INLINE_MYSQL_PASS='yourRootPassword'|INLINE_MYSQL_PASS='{{ mysqlrootpass }}'|" {{ local_dir }}/other/create_dbs.sh;

- service: name=mysqld state=started

- name: Enable root login to mysql using temporary password and change the MySQL root password
  shell: >
    if [ ! -e /root/.my.cnf ]; then echo "[client]" > /root/.my.cnf && echo "user=root" >> /root/.my.cnf && echo "password=`grep 'temporary password' /var/log/mysqld.log | gawk '{print $NF}'`" >> /root/.my.cnf && echo "ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ mysqlrootpass }}'" | mysql -u root --password=`grep 'temporary password' /var/log/mysqld.log | gawk '{print $NF}'` --connect-expired-password; fi;

- name: Disable sql_mode for Centos
  shell: >
    echo "set global sql_mode='NO_ENGINE_SUBSTITUTION'" | mysql -u root --password="{{ mysqlrootpass }}";
    if [ `grep 'sql-mode' /etc/my.cnf` ]; then
    sed -i 's|sql-mode=.*|sql-mode="NO_ENGINE_SUBSTITUTION"|' /etc/my.cnf;
    else
    echo "sql_mode='NO_ENGINE_SUBSTITUTION'" >> /etc/my.cnf;
    fi;
  when: ansible_distribution == 'CentOS'

- name: Disable sql_mode for Scientific Linux
  shell: >
    echo "sql_mode='NO_ENGINE_SUBSTITUTION'" >> /etc/my.cnf;
  when: ansible_distribution == 'Scientific'

- name: Put the root password into create_dbs.sh later remove
  shell: >
    sed -i "s|MYSQL_PASS_ARG=''|MYSQL_PASS_ARG='--password={{ mysqlrootpass }}'|" {{ local_dir }}/other/create_dbs.sh;
    sed -i "s|set -e|#set -e|" {{ local_dir }}/other/create_dbs.sh;

- name: Create KDDart Databases
  shell: "/bin/bash {{ local_dir }}/other/create_dbs.sh 2 kddart_gis_enviro_{{ dal_db_version }} {{ local_dir }}/other/db_files/kddart_gis_enviro_dal_{{ dal_version }}_postgis2.sql kddart_{{ dal_db_version }} {{ local_dir }}/other/db_files/kddart_dal_{{ dal_version }}.sql kddart_marker_{{ dal_db_version }} {{ local_dir }}/other/db_files/kddart_marker_dal_{{ dal_version }}.sql 1 > /root/create_dbs.log 2>&1"

- name: Save create dbs command for manual run to fix monetdb problem
  shell: echo "{{ local_dir }}/other/create_dbs.sh 2 kddart_gis_enviro_{{ dal_db_version }} {{ local_dir }}/other/db_files/kddart_gis_enviro_dal_{{ dal_version }}_postgis2.sql kddart_{{ dal_db_version }} {{ local_dir }}/other/db_files/kddart_dal_{{ dal_version }}.sql kddart_marker_{{ dal_db_version }} {{ local_dir }}/other/db_files/kddart_marker_dal_{{ dal_version }}.sql 1 > /root/create_dbs.log 2>&1" > {{ local_dir }}/other/run_create_dbs.sh; chmod 755 {{ local_dir }}/other/run_create_dbs.sh;

- name: Save create dbs command for demo databases
  shell: echo "{{ local_dir }}/other/create_dbs.sh 2 kddart_gis_enviro_{{ dal_db_version }} {{ local_dir }}/other/db_files/demo/kddart_gis_enviro_demo_{{ dal_db_version }}.sql kddart_{{ dal_db_version }} {{ local_dir }}/other/db_files/demo/kddart_demo_{{ dal_db_version }}.sql kddart_marker_{{ dal_db_version }} {{ local_dir }}/other/db_files/demo/kddart_marker_demo_{{ dal_db_version }}.sql 1 > /root/create_demo_dbs.log 2>&1" > {{ local_dir }}/other/run_create_demo_dbs.sh; chmod 755 {{ local_dir }}/other/run_create_demo_dbs.sh;

- name: Remove MySQL root password .my.cnf
  shell: >
    if [ -e /root/.my.cnf ]; then echo " " > /root/.my.cnf; fi;

- name: Make host entry
  shell: "[[ `grep '{{ dal_address_name }}' /etc/hosts` ]] || echo \"`ip route get 1 | awk '{print $NF;exit}'`	{{ dal_address_name }}\" >> /etc/hosts"

- name: Copy apache configuration
  shell: "[[ -f {{ dest_apache_conf_dir }}/http-{{ dal_address_name }}.conf ]] || cp {{local_dir}}/other/http-kddart.example.com.conf {{ dest_apache_conf_dir }}/http-{{ dal_address_name }}.conf"

- name: Adjust Apache conf to Centos
  shell: >
    sed -i 's|/srv/www/vhosts/kddart.example.com|{{ apache_base_dir }}/vhosts/{{ dal_address_name }}|g' {{ dest_apache_conf_dir }}/http-{{ dal_address_name }}.conf;
    sed -i 's|/var/log/apache2|/var/log/httpd|g' {{ dest_apache_conf_dir }}/http-{{ dal_address_name }}.conf;
    sed -i 's|kddart.example.com|{{ dal_address_name }}|g' {{ dest_apache_conf_dir }}/http-{{ dal_address_name }}.conf;

- name: Create directories
  file: path={{ item }} state=directory owner=apache group=apache mode=0755
  with_items:
    - '{{ apache_base_dir }}/cgi-bin/kddart'
    - '{{ apache_base_dir }}/tmp/kddart'
    - '{{ apache_base_dir }}/perl-lib'
    - '{{ apache_base_dir }}/vhosts'
    - '{{ apache_base_dir }}/vhosts/{{ dal_address_name }}'
    - '{{ apache_base_dir }}/session/kddart'
    - '{{ apache_base_dir }}/secure'
    - '{{ apache_base_dir }}/vhosts/{{ dal_address_name }}/storage'
    - '{{ apache_base_dir }}/vhosts/{{ dal_address_name }}/storage/multimedia'

- name: Create monetdb password file
  shell: "[[ -f {{ apache_base_dir }}/secure/monetdb_user.txt ]] || echo \"username = monetdb\npassword = {{ monetdbpass }}\" > {{ apache_base_dir }}/secure/monetdb_user.txt"

- name: Create mysql password file
  shell: "[[ -f {{ apache_base_dir }}/secure/mysql_user.txt ]] || echo \"username = kddart_dal\npassword = {{ dbpass }}\" > {{ apache_base_dir }}/secure/mysql_user.txt"

- name: Create postgres password file
  shell: "[[ -f {{ apache_base_dir }}/secure/postgres_user.txt ]] || echo \"username = kddart_dal\npassword = {{ dbpass }}\" > {{ apache_base_dir }}/secure/postgres_user.txt"

- name: Copy files to the relevant direcotries - due to * it needs in one line
  shell: >
    cp -rp {{ local_dir }}/vhosts/kddart.example.com/* {{ apache_base_dir }}/vhosts/{{ dal_address_name }};
    cp -rp {{ local_dir}}/perl-lib/* {{ apache_base_dir }}/perl-lib;
    cp {{local_dir}}/other/kddart_dal.cfg {{ apache_base_dir }}/secure;
    cp {{local_dir}}/cgi-bin/kddart/* {{ apache_base_dir }}/cgi-bin/kddart;

- name: Change /srv/www to {{ apache_base_dir }}
  shell: sed -i "s|/srv/www|{{ apache_base_dir }}|" {{ apache_base_dir }}/secure/kddart_dal.cfg

- name: Change /tmp/kddart to {{ apache_base_dir }}/tmp/kddart (Apache2.4 cannot write to /tmp)
  shell: sed -i "s|/tmp/kddart/|{{ apache_base_dir }}/tmp/kddart/|" {{ apache_base_dir }}/secure/kddart_dal.cfg;

- name: Change ACL for tmp directory
  shell: >
    setfacl -d -m o::rx {{ apache_base_dir }}/tmp/kddart;
    setfacl -d -m g::rwx {{ apache_base_dir }}/tmp/kddart;

- name: Include mod_perl module loading
  shell: "[[ `grep '^LoadModule perl_module' {{ apache_module_conf }}` ]] || echo 'LoadModule perl_module modules/mod_perl.so' >> {{ apache_module_conf }}"

- name: Include perl-lib into apache config
  shell: "[[ `grep 'PerlSwitches' {{ main_apache_conf }}` ]] || sed -i 's|Listen 80|Listen 80\\n\\nPerlSwitches -I{{ apache_base_dir }}/perl-lib|' {{ main_apache_conf }}"

- name: Enable Apache perl config
  shell: >
    if [ ! `grep '^<Directory /var/www/perl-lib>' {{ dest_apache_conf_dir }}/perl.conf` ]; then echo "<Directory /var/www/perl-lib>" >> {{ dest_apache_conf_dir }}/perl.conf; echo "    SetHandler perl-script" >> {{ dest_apache_conf_dir }}/perl.conf; echo "    PerlResponseHandler ModPerl::Registry" >> {{ dest_apache_conf_dir }}/perl.conf; echo "    PerlOptions +ParseHeaders" >> {{ dest_apache_conf_dir }}/perl.conf; echo "    Options +ExecCGI" >> {{ dest_apache_conf_dir }}/perl.conf; echo "</Directory>" >> {{ dest_apache_conf_dir }}/perl.conf; fi;

- name: Change ower and group manually
  shell: chown apache:apache -R {{ apache_base_dir }}/vhosts/{{ dal_address_name }}

- name: Change ower and group manually for config file
  shell: chown apache:apache {{ apache_base_dir }}/secure/kddart_dal.cfg

- name: Enable Httpd
  shell: systemctl enable httpd

- name: Enable MySQL
  shell: systemctl enable mysqld

- name: Enable PostgreSQL
  shell: systemctl enable postgresql-10

- name: Stop firewall
  shell: "[[ ! `systemctl list-unit-files | grep 'enabled' | grep 'firewalld'` ]] || systemctl stop firewalld"

- name: Disable firewall
  shell: "[[ ! `systemctl list-unit-files | grep 'enabled' | grep 'firewalld'` ]] || systemctl disable firewalld"

- name: Disable selinux
  shell: "[[ ! -e /etc/selinux/config ]] || sed -i 's|SELINUX=.*|SELINUX=disabled|' /etc/selinux/config"
  register: selinux_config

- name: Make MonetDB start by default at boot time
  shell: >
    [[ `grep '#!/bin/bash' /etc/rc.d/rc.local` ]] || echo "#!/bin/bash" >> /etc/rc.d/rc.local;
    [[ `grep '/usr/bin/monetdbd start' /etc/rc.d/rc.local` ]] || echo "/usr/bin/monetdbd start /var/lib/monetdb/dbfarm" >> /etc/rc.d/rc.local;
    chmod u+x /etc/rc.d/rc.local;
    systemctl enable rc-local;

- name: Update base URL for test cases
  shell: echo "http://{{ dal_address_name }}/dal" > {{ local_dir }}/other/whitebox_test_cases/TestSuite/dal_base_url.conf

- name: Remove timestamp from all test cases to prevent time issue - this cannot be done from repo
  shell: find {{ local_dir }}/other/whitebox_test_cases/TestSuite -iname 'case*.*' -exec sed -i 's|<RunInfo.*||' {} ";"

- name: Restart mysql
  shell: systemctl restart mysqld

- name: Restart postgresql
  shell: systemctl restart postgresql-10

- name: Restart apache
  shell: systemctl restart httpd

- name: Create Solr working directory
  file: path={{ solr_workspace }} state=directory

- name: Download Solr
  get_url:
    url: "http://archive.apache.org/dist/lucene/solr/{{ solr_version }}/solr-{{ solr_version }}.tgz"
    dest: "{{ solr_workspace }}/solr-{{ solr_version }}.tgz"
    force: no

- name: Expand Solr
  unarchive:
    src: "{{ solr_workspace }}/solr-{{ solr_version }}.tgz"
    dest: "{{ solr_workspace }}"
    creates: "{{ solr_workspace }}/solr-{{ solr_version }}/CHANGES.txt"
    copy: no

- name: Run Solr installation script
  shell: >
    {{ solr_workspace }}/solr-{{ solr_version }}/bin/install_solr_service.sh
    {{ solr_workspace }}/solr-{{ solr_version }}.tgz
    -i {{ solr_install_dir }}
    -d {{ solr_home }} -f
    creates={{ solr_install_dir }}/solr/bin/solr

- name: Start solr
  shell: >
    [[ `grep 'solr' /etc/passwd` ]] || useradd -m solr;
    chown solr:solr -R /var/solr;
    [[ -e /var/solr/solr-8983.pid ]] || /etc/init.d/solr start;

- name: Check current list of Solr cores
  uri:
    url: http://localhost:8983/solr/admin/cores
    return_content: yes
  register: solr_cores_current

- name: Create configured cores.
  shell: "su solr -c '{{ solr_install_dir }}/solr/bin/solr create_core -c {{ item }}'"
  with_items:
    - db
    - monetdb
    - dal

- name: Insert config into db core solrconfig.xml
  blockinfile:
    dest: "{{ solr_home }}/data/db/conf/solrconfig.xml"
    marker: "<!-- {mark} DART ANSIBLE MANAGED BLOCK -->"
    insertafter: "<config>"
    content: |
        <lib dir="${solr.install.dir}/dist/" regex="solr-dataimporthandler-.*\.jar" />
        <lib dir="${solr.install.dir:../../../..}/contrib/dataimporthandler-extras/lib/" regex=".*\.jar" />
        <requestHandler name="/dataimport" class="org.apache.solr.handler.dataimport.DataImportHandler">
          <lst name="defaults">
            <str name="config">db-data-config.xml</str>
          </lst>
        </requestHandler>

- name: Insert config into monetdb core solrconfig.xml
  blockinfile:
    dest: "{{ solr_home }}/data/monetdb/conf/solrconfig.xml"
    marker: "<!-- {mark} DART ANSIBLE MANAGED BLOCK -->"
    insertafter: "<config>"
    content: |
        <lib dir="${solr.install.dir}/dist/" regex="solr-dataimporthandler-.*\.jar" />
        <lib dir="${solr.install.dir:../../../..}/contrib/dataimporthandler-extras/lib/" regex=".*\.jar" />
        <requestHandler name="/dataimport" class="org.apache.solr.handler.dataimport.DataImportHandler">
          <lst name="defaults">
            <str name="config">monetdb-data-config.xml</str>
          </lst>
        </requestHandler>

- name: copy data-config.xml for each core
  shell: cp {{ local_dir }}/other/solr/config/{{ item }}/conf/{{ item }}-data-config.xml {{ solr_home }}/data/{{ item }}/conf
  with_items:
    - db
    - monetdb
    - dal

- name: Copy MySQL jdbc jar files
  shell: cp -f {{ local_dir }}/other/solr/dataimporthandler/*.jar {{ solr_install_dir }}/solr/contrib/dataimporthandler-extras/lib

- name: Configure core db
  shell: >
    {{ local_dir }}/other/solr/{{ item }}-setup-fields.sh 1>{{ local_dir }}/{{ item }}-setup-fields.log 2>&1
  with_items:
    - db
    - monetdb
    - dal

- name: Put the password into db-data-config.xml
  replace: dest={{ solr_home }}/data/db/conf/db-data-config.xml regexp='yourSecurePassword' replace="{{ dbpass }}"

- name: Change unique key from id to SolrId
  replace: dest={{ solr_home }}/data/{{ item }}/conf/managed-schema regexp='<uniqueKey>id</uniqueKey>' replace="<uniqueKey>SolrId</uniqueKey>"
  with_items:
    - db
    - monetdb
    - dal

- name: Restart solr
  shell: /etc/init.d/solr restart

#- cron:
#    name: Reindex Solr
#    minute: "*/15"
#    job: "/usr/bin/perl -w {{ local_dir }}/other/solr/reindex_solr.pl --dalbaseurl 'http://{{ dal_address_name }}/dal' --workingdir '/tmp' --username 'admin' --password 'kddartadmin' --kddartgroup 0 --solrhost 'http://localhost' --solrport '8983' --solrcorecsv 'dal,db,monetdb' > /root/reindex_solr.log 2>&1"
